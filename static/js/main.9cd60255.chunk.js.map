{"version":3,"sources":["firebase.js","firebaseContext.js","login.js","confirm.js","newChat.js","home.js","oneChat.js","app.js","serviceWorker.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","database","FirebaseContext","React","createContext","Login","useContext","login","register","error","setError","useState","email","setEmail","password","setPassword","history","useHistory","useEffect","firebaseAuth","foo","a","goBack","Fragment","value","onChange","e","target","id","autoFocus","onClick","className","Confirm","message","open","setOpen","confirm_msg","Dialog","onClose","DialogTitle","DialogActions","color","push","NewChat","username","create","initValues","title","manifest","values","setValues","handleChange","name","Object","keys","map","key","placeholder","status","date","Moment","Date","format","Home","chats","setChats","getChatsRef","getChatRef","chatsRef","on","snapshot","chat","val","columns_names","ButtonCell","path","icon","TableCell","align","views","undefined","update","Table","TableHead","TableRow","TableBody","column","challenger","OneChat","peep","chat_id","window","location","pathname","split","length","messages","setMessages","getChatRefMessages","messagesRef","chatRef","setChat","bottom","setBottom","document","getElementById","scrollIntoView","getClassName","msg_username","msgClass","r","msg","ix","user","text","onKeyDown","Nav","logout","activeClassName","exact","to","App","setUsername","signInWithEmailAndPassword","catch","err","currentUser","signOut","createUserWithEmailAndPassword","isInitialized","Promise","resolve","onAuthStateChanged","newChat","ref","orderByKey","limitToLast","child","DB","Provider","component","render","props","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","console"],"mappings":"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","file":"static/js/main.9cd60255.chunk.js","sourcesContent":["\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n \n\nimport 'firebase/firebase-firestore'\nimport React, {useState} from \"react\"\n\n\nconst config = {\n  apiKey: \"AIzaSyCzSZFG-HLeakTSP0X_CJGXs6kBRRxasOQ\",\n  authDomain: \"debates-3f413.firebaseapp.com\",\n  databaseURL: \"https://debates-3f413.firebaseio.com\",\n  projectId: \"debates-3f413\",\n  storageBucket: \"debates-3f413.appspot.com\",\n  messagingSenderId: \"364331969790\",\n  appId: \"1:364331969790:web:5359c5e81b7f5cb4f749af\"\n}\napp.initializeApp(config)\nconst auth = app.auth()\nconst db = app.database()\n\nexport const DB = () => {\t\n\n\tconst [username, setUsername] = useState()\n\tconst [error, setError] = useState()\n\n\tconst login =  async(email, password) => {\n\t\tsetError(\"\")\n\t\tawait auth.signInWithEmailAndPassword(email, password).catch((err)=>setError(err.message))\n\t\tif (auth.currentUser) {\n\t\t\tsetUsername(auth.currentUser.email)\n\t\t}\n\t}\n\n\tconst logout = () =>  {\n\t\tsetUsername(\"\")\n\t\treturn auth.signOut()\n\t}\n\n\tconst register = async (email, password)=> {\n\t\tsetError(\"\")\n\t\tawait auth.createUserWithEmailAndPassword(email, password).catch((err)=>setError(err.message))\t\n\t}\n\n\tconst isInitialized = () => {\n\t\treturn new Promise(resolve => {\t\n\t\t\tauth.onAuthStateChanged(resolve)\n\t\t})\n\t}\n\t\n\tconst create = async(newChat) => db.ref(\"chats\").push(newChat)\n\tconst getChatsRef = () =>  db.ref(\"chats\").orderByKey().limitToLast(1000);\n\tconst getChatRef = (id) =>  db.ref(\"chats\").child(id)\n\tconst getChatRefMessages = (id) =>db.ref(\"chats\").child(id).child(\"messages\")\n \n\treturn { login, logout ,register, isInitialized , username, create, getChatsRef, getChatRefMessages, error,getChatRef, setError}\n\n}\n\n\n\n","import React from 'react'\nexport const FirebaseContext = React.createContext(null);","import React, {useContext, useEffect, useState} from 'react'\nimport {FirebaseContext} from './firebaseContext' \nimport {useHistory} from 'react-router-dom'\n\nexport const Login= ()=> {\n    const {login, register, error, setError} = useContext(FirebaseContext)\n    const [email, setEmail] =useState(\"wyp3@gmail.com\")\n    const [password, setPassword] =useState(\"Wypwyp12\")\n    const history = useHistory()\n\n    useEffect(()=>setError(\"\"), [])\n    const firebaseAuth = async(foo, email, password)=>{\n        setError()\n        await foo(email, password)\n        foo === \"login\" && !error && history.goBack()\n    }\n\n    return(\n    <React.Fragment>\n        <input value={email} onChange={e=>setEmail(e.target.value)}></input>\n        <input value={password} onChange={e=>setPassword(e.target.value)}></input>\n        <button id=\"login\" autoFocus onClick={()=>firebaseAuth(login, email,password)}>Login</button>\n        <button onClick={()=>firebaseAuth(register, email,password)}>Register</button>\n        <div className=\"error\">{error}</div>\n    </React.Fragment>\n    )\n}","import Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport React  from 'react';\nimport {useHistory} from 'react-router-dom'\n\nexport  default function Confirm({message}) {\n  const [open, setOpen] = React.useState(true);\n  const history = useHistory()\n  const confirm_msg = message || \"Please login first\"\n  const disagree = () => history.goBack()\n  const agree = () => history.push(\"/login\")\n    \n  return (\n      <Dialog open={open} onClose={()=>setOpen(false)}>\n        <DialogTitle >{confirm_msg}</DialogTitle>\n        <DialogActions>\n          <button onClick={disagree} color=\"primary\">\n            Go back\n          </button>\n          <button onClick={agree} color=\"primary\" autoFocus>\n            Login\n          </button>\n        </DialogActions>\n      </Dialog>\n  );\n}","import React, { useState,  useContext }  from 'react';\nimport {FirebaseContext} from './firebaseContext'  \nimport Moment from \"moment\"\nimport Confirm from \"./confirm\"\nimport { useHistory} from 'react-router-dom'\n\n\nconst NewChat = () => {\n    const {username, create } = useContext(FirebaseContext)   \n    const initValues ={title:\"\", manifest:\"\"}\n    const history = useHistory()\n    const [values, setValues] = useState(initValues)\n    const save =  () =>{\n        create({...values, username,  status:0, date:Moment(new Date()).format('DD/MM/YYYY HH:mm:ss')})\n        history.push(\"/\")\n    }\n\n    const handleChange = (e) =>{\n        const {name, value} = e.target\n        setValues({...values, [name]:value})\n    }\n\n    return (<React.Fragment>\n        { !username  && <Confirm/>}        \n        <form>\n            <p>Make your point:</p>\n            {Object.keys(initValues).map( (key) =>\n            <div key={key}><input className=\"new_message\" onChange={handleChange} name={key} placeholder={key} value={values[key]}></input></div>            \n            )}   \n        </form>\n        <button onClick={save}>Save</button>\n    </React.Fragment>)\n}\n\n\nexport default NewChat","import React, {useContext, useState,useEffect} from 'react'\nimport {FirebaseContext} from './firebaseContext' \n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\n\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { useHistory} from 'react-router-dom'\n\n\nexport const Home = ()=> {\n    const [chats, setChats] = useState([])\n    const {getChatsRef, getChatRef, username} = useContext(FirebaseContext)\n    const chatsRef = getChatsRef()\n    \n    useEffect(()=>{\n        chatsRef.on('child_added',  (snapshot) => {\n            const chat =  { ... snapshot.val(), id: snapshot.key };\n            setChats(( chats) =>[...chats, chat])\n        })\n    },[])\n\n    const columns_names = ['title','manifest','username','challenger','date','views']\n    let history = useHistory()\n  \n    const ButtonCell = ({chat, path,icon}) =>\n    (<TableCell align=\"left\">\n      <button className={path}\n        onClick={()=> {\n          const views = chat.views !== undefined ? chat.views + 1:1\n          path === \"peep\" && getChatRef(chat.id).update({\"views\":views})\n          return history.push(`${path}/${chat.id}`)}\n        }>\n         <span>{icon}</span>\n        </button>\n        </TableCell>)\n\n    return(\n    <React.Fragment>\n       <Table>\n      <TableHead>\n          <TableRow key={'i'}>\n           {columns_names.map((title) =>\n           <TableCell key={title} align=\"left\">{title}&nbsp;</TableCell>)}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {chats.map((chat) => (\n            <TableRow key={chat.id}>\n                {columns_names.map((column)=><TableCell key={column} align=\"left\">{chat[column]}</TableCell>)}\n            <ButtonCell icon={'\\uD83D\\uDC40'} path='peep' chat={chat}/>\n            {username && (!chat.challenger || chat.challenger === username \n              || chat.username === username )&& <ButtonCell icon={'\\u2694\\uFE0F'} path='onechat' chat={chat} />}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n    )\n}","\nimport React, { useEffect, useContext , useState}  from 'react';\nimport {FirebaseContext} from './firebaseContext'  \nimport Confirm from \"./confirm\"\n\nexport const OneChat = ({peep}) =>{\n    const chat_id = window.location.pathname.split(\"/\")[window.location.pathname.split(\"/\").length -1]\n    const [messages, setMessages] = useState([])\n    const {getChatRefMessages, username, getChatRef} = useContext(FirebaseContext)\n    const messagesRef = getChatRefMessages(chat_id)\n    const chatRef = getChatRef(chat_id)\n    const [chat, setChat] = useState()\n    const [bottom, setBottom] = useState()\n\n    const sendMessage =(e)=>{       \n        if (e.key ==='Enter'){\n            messagesRef.push( {\"text\":e.target.value, \"user\":username});\n            e.target.value = \"\"\n            !chat.challenger && chatRef.update({\"status\":1 , \"challenger\":username})\n        }\n    }   \n    \n    useEffect(()=>{\n        setBottom(document.getElementById(\"bottom\"))\n        bottom && bottom.scrollIntoView()\n    },[bottom,setBottom]\n    )\n\n    useEffect( ()=>{\n        chatRef.on(\"value\", snapshot =>  setChat(snapshot.val()))\n        messagesRef.on('child_added',  snapshot =>\n        setMessages(messages=>[...messages,snapshot.val()]))\n         \n    },[])\n    \n    const getClassName= (msg_username) => {\n        let msgClass = \"message\"\n        msgClass = msg_username === chat.username ?  msgClass + \" blue\"  : msgClass + \" red\"\n        return msgClass\n    }\n\n    let r = <p>loading....</p>    \n    if (messages && chat){\n        r =  (<React.Fragment> \n        <h3 className=\"titles\">{chat.manifest}</h3>\n        <ul>{messages.map((msg, ix) =>\n        <li className={getClassName(msg.user)} key={ix}>{msg.text}</li>)}</ul>\n        <div><spam id=\"bottom\"></spam></div>\n        {!peep && <input className=\"new_message\" onKeyDown={sendMessage}></input>} \n        {!peep && username === chat.username && chat.status === 0  && <Confirm message=\"You cant start debate with yourself\"/>}\n        \n</React.Fragment>)\n    }\n \n    if (!peep && !username){\n        r = <Confirm message=\"Please login\"/>\n    }\n \n    return r\n}","import React, { useEffect , useState}  from 'react';\nimport {Switch,   isActive,  NavLink, Route, BrowserRouter as Router}  from 'react-router-dom'\n\nimport  {DB} from './firebase';\nimport {FirebaseContext} from './firebaseContext'  \nimport {Login} from \"./login\"\nimport NewChat from \"./newChat\"\nimport {Home} from \"./home\"\nimport {OneChat} from \"./oneChat\"\n \n\n\n\nconst Nav = ({user, logout}) => \n      <nav>\n            <NavLink activeClassName='selectedLink' exact to=\"/\">Home </NavLink>   \n            <NavLink activeClassName='selectedLink' to=\"/new\">New</NavLink>\n            {user && <p className=\"navbar-right\">\n                        <div className=\"navbar-right-el\">{user}</div>\n                        <button id=\"logout\" className=\"navbar-right-el\" onClick={()=>logout()}>Logout</button>\n                  </p>}\n            {!user && <NavLink id=\"loginnav\" exact className=\"navbar-right\" activeClassName='selectedLink' to=\"/login\">Login</NavLink>}\n      </nav>\n\n\n\nexport const  App  = () => {   \n     \n      const  db = DB()\n       useEffect(()=>{\n                db.isInitialized()}\n            ,[])\n      const { username, logout} =  db\n\n      return (\n      \n      <Router>\n            <h2 className=\"main_title\">Make Your Point</h2>\n      <Nav user={username} logout={logout}/>\n      \n      <Switch>\n            <FirebaseContext.Provider value={db}>\n            <Route exact path=\"/\" component={Home}></Route>\n            <Route exact path=\"/login\" component={Login}></Route>\n            <Route exact path=\"/new\" component={NewChat}></Route>\n            <Route exact path=\"/oneChat/:id\" render={(props) => <OneChat {...props} peep={false}/>}></Route>\n            <Route exact path=\"/peep/:id\" render={(props) => <OneChat {...props} peep={true}/>}></Route>\n            </FirebaseContext.Provider>\n            </Switch>\n      </Router>)\n  \n }\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './app.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();"],"sourceRoot":""}